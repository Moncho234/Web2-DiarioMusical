main.py 
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from .database import engine, Base, SessionLocal
from .models import Sesion
from .schemas import SesionSchema, SesionCreate

Base.metadata.create_all(bind=engine)

app = FastAPI()

# Dependencia para la sesi贸n de base de datos
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.post("/sesiones/", response_model=SesionSchema)
def create_sesion(sesion: SesionCreate, db: Session = Depends(get_db)):
    db_sesion = Sesion(**sesion.dict())
    db.add(db_sesion)
    db.commit()
    db.refresh(db_sesion)
    return db_sesion

@app.get("/sesiones/", response_model=list[SesionSchema])
def read_sesiones(db: Session = Depends(get_db)):
    try:
        sesiones = db.query(Sesion).all()
        return sesiones
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al recuperar las sesiones: {str(e)}")

crud.py
from sqlalchemy.orm import Session
from . import models, schemas

def get_users(db: Session):
    return db.query(models.User).all()

database.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

SQLALCHEMY_DATABASE_URL = "sqlite:///./diario_practica.db"

engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

# Funci贸n para crear las tablas
def init_db():
    Base.metadata.create_all(bind=engine)

# Llama a init_db() para crear las tablas cuando inicies la aplicaci贸n
init_db()

models.py
from sqlalchemy import Column, Integer, String, Float, DateTime
from sqlalchemy.sql import func
from .database import Base

class Sesion(Base):
    __tablename__ = 'sesiones'

    id = Column(Integer, primary_key=True, index=True)
    fecha = Column(DateTime, default=func.now())
    duracion = Column(Float)
    piezas_tecnicas = Column(String, nullable=True)
    notas = Column(String, nullable=True)

schemas.py
from pydantic import BaseModel
from datetime import datetime
from typing import Optional

# Esquema para leer las sesiones
class SesionSchema(BaseModel):
    id: int
    fecha: datetime
    duracion: float
    piezas_tecnicas: Optional[str] = None
    notas: Optional[str] = None

    class Config:
        orm_mode = True  # Permite leer los datos desde un modelo ORM

# Esquema para crear una sesi贸n nueva
class SesionCreate(BaseModel):
    duracion: float
    piezas_tecnicas: Optional[str] = None
    notas: Optional[str] = None

users.py
from fastapi import APIRouter

router = APIRouter()

@router.get("/users/")
def get_users():
    return {"users": ["Usuario 1", "Usuario 2"]}
